const { expect } = require("chai");
import { encodeAllocations, encodeExit } from "../ts/coders";
import { Allocation, Exit } from "../ts/types";

describe("ExitFormat (typescript)", function () {
  it("Can encode an allocation", async function () {
    const allocation: Allocation = {
      destination: "0x96f7123E3A80C9813eF50213ADEd0e4511CB820f",
      amount: "0x01",
      data: "0x",
    };
    const encodedAllocation = encodeAllocations(allocation);

    expect(encodedAllocation).to.eq(
      "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000096f7123e3a80c9813ef50213aded0e4511cb820f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("Can encode an exit", async function () {
    const exit: Exit = [
      {
        asset: "0x0000000000000000000000000000000000000000",
        data: "0x",
        allocations: [
          {
            destination: "0x96f7123E3A80C9813eF50213ADEd0e4511CB820f",
            amount: "0x01",
            data: "0x",
          },
        ],
      },
    ];
    const encodedExit = encodeExit(exit);

    expect(encodedExit).to.eq(
      "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000096f7123e3a80c9813ef50213aded0e4511cb820f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000"
    );
  });
});

const x = 0xdeadbeef;
const y = 0x96f7123e3a80c9813ef50213aded0e4511cb820f;
